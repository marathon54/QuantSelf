library(caret)
library(doParallel)
install.packages("doParallel")
output: html_document
training <- read.csv("pml-training.csv", na.strings=c("NA", ""), strip.white = T)
verification <- read.csv("pml-testing.csv", na.strings=c("NA", ""), strip.white = T)
is.na(training)
colSums(is.na(training))
training <- training[,colSums(is.na(training)) == 0]
verification <- cbind(verification[,colnames(training[,-ncol(training)])], problem_id=verification$problem_id)
summary(training)
dim(training)
training <- read.csv("pml-training.csv", na.strings=c("NA", ""), strip.white = T)
verification <- read.csv("pml-testing.csv", na.strings=c("NA", ""), strip.white = T)
dim(training)
findCorrelation(training)
findCorrelation(abs(cor(training[,-53])),0.9)
highCorrIdx <- findCorrelation(abs(cor(training[,-53])),0.9)
highCorrIdx <- findCorrelation(abs(cor(training[,-53])),0.9)
training <- read.csv("pml-training.csv", na.strings=c("NA", ""), strip.white = T)
verification <- read.csv("pml-testing.csv", na.strings=c("NA", ""), strip.white = T)
training <- training[,colSums(is.na(training)) == 0]
verification <- cbind(verification[,colnames(training[,-ncol(training)])], problem_id=verification$problem_id)
training <- training[,-c(1:7)]
verification <- verification[,-c(1:7)]
highCorrIdx <- findCorrelation(abs(cor(training[,-53])),0.9)
training <- training[,-highCorrIdx]
verification <- verification[,-highCorrIdx]
highCorrIdx <- findCorrelation(abs(cor(training[,-53])),0.9)
highCorrIdx
findCorrelation(abs(cor(training[,-53])),0.9)
dim(training)
training <- training[,-c(1:7)]
verification <- verification[,-c(1:7)]
highCorrIdx <- findCorrelation(abs(cor(training[,-53])),0.85)
training <- training[,-highCorrIdx]
verification <- verification[,-highCorrIdx]
dim(training)
set.seed(42)
inTrain <- createDataPartition(y=training$classe, p=0.75, list=FALSE)
testing <- training[-inTrain,]
training <- training[inTrain,]
ctrl <- trainControl(method="cv", number=4)
ctrl <- trainControl(number=4) #method="cv"
modFit <- train(classe~.,data=training,method="rf", trControl=ctrl)
ctrl <- trainControl(method="cv",number=4) #method="cv"
modFit <- train(classe~.,data=training,method="rf", trControl=ctrl)
cl <- makeCluster(detectCores())
library(doParallel)
cl <- makeCluster(detectCores())
cl
registerDoParallel(cl)
modFit <- train(classe~.,data=training,method="rf", trControl=ctrl)
stopCluster(cl)
varImpPlot(modFit$finalModel)
plot(modFit$finalModel, log="y")
modFit$finalModel
ctrl <- trainControl(method="boot",number=4) #method="cv"
cl <- makeCluster(detectCores())
registerDoParallel(cl)
modFit <- train(classe~.,data=training,method="rf", trControl=ctrl)
stopCluster(cl)
modFit$finalModel
findCorrelation(abs(cor(training[,-53])),0.85)
highCorrIdx <- findCorrelation(abs(cor(training[,-53])),0.85)
highCorrIdx
highCorrIdx <- findCorrelation(abs(cor(training[,-53])),0.7)
highCorrIdx
training <- training[,-c(1:7)]
verification <- verification[,-c(1:7)]
highCorrIdx <- findCorrelation(abs(cor(training[,-53])),0.85)
cor(training[,-53])
cor(training)
str(training)
as.numeric(training)
training <- training[,colSums(is.na(training)) == 0]
verification <- cbind(verification[,colnames(training[,-ncol(training)])], problem_id=verification$problem_id)
training <- training[,-c(1:7)]
verification <- verification[,-c(1:7)]
highCorrIdx <- findCorrelation(abs(cor(training[,-53])),0.85)
training <- training[,-highCorrIdx]
verification <- verification[,-highCorrIdx]
training <- read.csv("pml-training.csv", na.strings=c("NA", ""), strip.white = T)
verification <- read.csv("pml-testing.csv", na.strings=c("NA", ""), strip.white = T)
dim(training)
training <- training[,colSums(is.na(training)) == 0]
verification <- cbind(verification[,colnames(training[,-ncol(training)])], problem_id=verification$problem_id)
dim(training)
training <- training[,-c(1:7)]
verification <- verification[,-c(1:7)]
highCorrIdx <- findCorrelation(abs(cor(training[,-53])),0.85)
training <- training[,-highCorrIdx]
verification <- verification[,-highCorrIdx]
training <- training[,colSums(is.na(training)) == 0]
verification <- cbind(verification[,colnames(training[,-ncol(training)])], problem_id=verification$problem_id)
training <- training[,-c(1:7)]
verification <- verification[,-c(1:7)]
highCorrIdx <- findCorrelation(abs(cor(training[,-53])),0.85)
training <- training[,-highCorrIdx]
verification <- verification[,-highCorrIdx]
set.seed(42)
inTrain <- createDataPartition(y=training$classe, p=0.75, list=FALSE)
testing <- training[-inTrain,]
training <- training[inTrain,]
ctrl <- trainControl(method="cv",number=4) #method="cv"
cl <- makeCluster(detectCores())
registerDoParallel(cl)
library(rpart)
rpart1<-(classe~., data=training, control = rpart.control(maxdepth =2))
rpart1
library(rpart)
rpart1<-(classe~., data=training, control = rpart.control(maxdepth =2))
rpart1
library(rpart)
rpart1<-(classe~., data=training, control = rpart.control(maxdepth =2))
rpart1<-(classe ~ ., data=training, control = rpart.control(maxdepth =2))
rpart1<-(classe ~ . data=training, control = rpart.control(maxdepth =2))
rpart1<-rpart(classe ~ ., data=training, control = rpart.control(maxdepth =2))
rpart1
rpart1a<- as.party(rpart1)
plot(rpart1a)
library(rpart)
rpart1<-rpart(classe ~ ., data=training, control = rpart.control(maxdepth =2))
rpart1a<- as.party(rpart1)
plot(rpart1a)
install.packages("partykit")
library(partykit)
rpart1a<- as.party(rpart1)
install.packages("partykit")
library(partykit)
rpart1<-rpart(classe ~ ., data=training, control = rpart.control(maxdepth =2))
rpart1a<- as.party(rpart1)
plot(rpart1a)
rpart1<-rpart(classe ~ ., data=training, control = rpart.control(maxdepth =3))
library(rpart)
library(partykit)
rpart1<-rpart(classe ~ ., data=training, control = rpart.control(maxdepth =3))
rpart1a<- as.party(rpart1)
plot(rpart1a)
library(rpart)
library(partykit)
rpart1<-rpart(classe ~ ., data=training, control = rpart.control(maxdepth =4))
rpart1a<- as.party(rpart1)
plot(rpart1a)
library(rpart)
library(partykit)
rpart1<-rpart(classe ~ ., data=training, control = rpart.control(maxdepth =5))
rpart1a<- as.party(rpart1)
plot(rpart1a)
rpart1<-rpart(classe ~ ., data=training, control = rpart.control(maxdepth =4))
rpart1a<- as.party(rpart1)
plot(rpart1a)
